// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Define the User model for clients
model User {
  id        Int         @id // Primary key with autoincrement
  email     String      @unique // Unique constraint for email
  name      String? // Optional name field
  password  String
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @default(now()) @updatedAt @map("updated_at")
  bookings  Booking[] // One-to-many relationship: One user can have multiple bookings
  Favourite Favourite[]
}

// Define the Owner model for accommodation owners
model Owner {
  id         Int        @id // Primary key with autoincrement
  email      String     @unique // Unique constraint for email
  name       String? // Optional name field
  password   String
  createdAt  DateTime   @default(now()) @map("created_at")
  updatedAt  DateTime   @default(now()) @updatedAt @map("updated_at")
  properties Property[] // One-to-many relationship: One owner can have multiple accommodations
}

// Define the Accommodation model
model Property {
  id          Int            @id @default(autoincrement()) // Primary key with autoincrement
  name        String // Name of the accommodation
  type        PropertyType // Type of accommodation (e.g., Hotel, Villa, Guest House)
  description String // Description of the accommodation
  location    String // Location of the accommodation
  price       Float // Price of the accommodation per night
  status      PropertyStatus // Status of the accommodation
  owner_id    Int // Foreign key to Owner
  owner       Owner          @relation(fields: [owner_id], references: [id]) // Many-to-one relationship: Many accommodations can be associated with one owner
  bookings    Booking[] // One-to-many relationship: One accommodation can have multiple bookings
  createdAt   DateTime       @default(now()) @map("created_at")
  updatedAt   DateTime       @default(now()) @updatedAt @map("updated_at")
  Favourite   Favourite[]
}

// Define the Booking model
model Booking {
  id           Int           @id @default(autoincrement()) // Primary key with autoincrement
  property_id  Int // Foreign key to Accommodation
  user_id      Int // Foreign key to User
  status       BookingStatus // Status of the booking
  user         User          @relation(fields: [user_id], references: [id]) // Many-to-one relationship: Many bookings can be associated with one user
  property     Property      @relation(fields: [property_id], references: [id]) // Many-to-one relationship: Many bookings can be associated with one accommodation
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @default(now()) @updatedAt @map("updated_at")
  transactions Transaction[] // One-to-many relationship: One booking can have multiple transactions
}

// Define the Transaction model
model Transaction {
  id             Int      @id @default(autoincrement()) // Primary key with autoincrement
  booking_id     Int // Foreign key to Booking
  amount         Float // Amount of the transaction
  currency       String // Currency of the transaction (e.g., USD, EUR)
  timestamp      DateTime // Timestamp of the transaction
  payment_method String // Payment method used for the transaction (e.g., credit card, PayPal)
  status         String // Status of the transaction (e.g., pending, completed, failed)
  booking        Booking  @relation(fields: [booking_id], references: [id]) // Many-to-one relationship: Many transactions can be associated with one booking
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at")
}

model Favourite {
  id          Int      @id @default(autoincrement())
  property_id Int
  user_id     Int
  user        User     @relation(fields: [user_id], references: [id]) // Many-to-one relationship: Many bookings can be associated with one user
  property    Property @relation(fields: [property_id], references: [id])

  @@unique([user_id, property_id]) // Composite unique constraint
  @@index([property_id])
  @@index([user_id])
}

// Define enum for booking status
enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

// Define enum for accommodation type
enum PropertyType {
  VILLA
  HOTEL
  GUEST_HOUSE
}

// Define enum for accommodation status
enum PropertyStatus {
  ACTIVE
  PERMANENT_CLOSED
  TEMPORARY_CLOSED
}
